{
  "name": "sharedmemory",
  "description": "Cluster Shared Memory",
  "keywords": [
    "memory",
    "shared",
    "cluster",
    "util",
    "utility"
  ],
  "version": "0.0.7",
  "author": {
    "name": "Dx.Yang",
    "email": "x6doooo@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/x6doooo/sharedmemory.git"
  },
  "bugs": {
    "url": "http://github.com/x6doooo/sharedmemory/issues"
  },
  "license": [
    {
      "type": "MIT",
      "url": "https://github.com/x6doooo/sharedmemory/raw/master/LICENSE-MIT"
    }
  ],
  "engines": [
    "node >= 0.8.0"
  ],
  "main": "./index.js",
  "readme": "SharedMemory\n===\n通过IPC实现Cluster共享内存\n\n[![NPM](https://nodei.co/npm/sharedmemory.png)](https://nodei.co/npm/sharedmemory/)\n\n### Installation\n\tnpm install sharedmemory\n\n### Usage\n\n```javascript\nvar cluster = require('cluster')\nvar initSharedMemory = require('./sharedmemory').init;\n\n// 创建共享内存的控制器\n// 在master进程中，控制器负责维护共享内存\n// 在worker进程中，控制器负责和master的控制器通信，通过IPC消息对共享内存进行读写操作\nvar sharedMemoryController = initSharedMemory();\n\nif (cluster.isMaster) {\n\n    // fork第一个worker\n    cluster.fork();\n\n    // 1秒后fork第二个worker\n    setTimeout(function() {\n        cluster.fork(); \n    }, 1000);\n      \n} else {\n\n    if (cluster.worker.id == 1) {\n        // 第一个worker向共享内存写入一组数据，用a标记\n        sharedMemoryController.set('a', [0, 1, 2, 3]);\n    }\n\n    if (cluster.worker.id == 2) {\n        // 第二个worker从共享内存读取a的值\n        sharedMemoryController.get('a', function(data) {\n            console.log(data);  // => [0, 1, 2, 3]\n            // 删除\n            sharedMemoryController.remove('a');\n        });\n    }\n    \n}\n```\n\n### Configure\n\n1、 无参数\n\n```javascript\nrequire('./sharedmemory').init();\n```\n\n默认情况会直接在主进程里创建共享内存，并且没有缓存控制策略\n\n2、 过期淘汰\n\n```javascript\nrequire('./sharedmemory').init({\n    cache: {\n        type: 'expire', //类型\n        expire: 60 * 60 * 1000    //一小时过期。不指定则采用默认的30分钟过期\n    }\n});\n```\n\n3、 LRU\n\n```javascript\nrequire('./sharedmemory').init({\n    cache: {\n        type: 'LRU', //类型\n        max: 20000    //最多20000条记录。不指定则采用默认的10000条\n    }\n});\n```\n\n超过记录数，最长时间未被访问的记录会被删除。\n\n",
  "readmeFilename": "README.md",
  "_id": "sharedmemory@0.0.7",
  "dist": {
    "shasum": "06c04bbfc0442d0dcf940d45be738d82ddea5e59"
  },
  "_from": "sharedmemory@",
  "_resolved": "https://registry.npmjs.org/sharedmemory/-/sharedmemory-0.0.7.tgz"
}
